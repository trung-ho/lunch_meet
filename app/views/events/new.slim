#event-new-page
  .container
    h2.text-center Create New Event
    h4.text-muted Event information
    = simple_form_for @event, wrapper: :horizontal_form, wrapper_mappings: { file: :horizontal_file },
                              wrapper_mappings: { boolean: :horizontal_boolean,
                                check_boxes:   :horizontal_collection,
                                date:          :horizontal_multi_select,
                                datetime:      :horizontal_multi_select,
                                file:          :horizontal_file,
                                radio_buttons: :horizontal_collection,
                                range:         :horizontal_range,
                                time:          :horizontal_multi_select }, url: group_events_path do |f|
      = f.error_notification
      = f.input :title, placeholder: 'Event Title'
      = f.input :description, placeholder: 'Briefly description of event'
      - invalid_start_time = false
      - if @event.errors.messages && @event.errors.messages[:start_at].any?
        - invalid_start_time = true
      .form-group.row.string.optional.event_start_at
        label.col-sm-3.col-form-label.string.optional for="event_start_at" Event start time
        .col-sm-9#start_at_datetime_picker.input-group.date data-target-input="nearest"
          #event-stat-at-value.d-none= @event.start_at
          input#event_start_at.form-control.string.optional.datetimepicker-input name="event[start_at]" type="text" data-target="#start_at_datetime_picker" class="#{invalid_start_time ? 'is-invalid' : ''}"
          .input-group-append data-target="#start_at_datetime_picker" data-toggle="datetimepicker" 
            .input-group-text
              i.fa.fa-calendar
          - if invalid_start_time
            .invalid-feedback= 'Start time ' + @event.errors.messages[:start_at].first
      hr
      h4.text-muted Find restaurants for event
      / = f.input :vote_duration, collection: [0.5, 1, 2, 4, 8, 12, 24, 48], label: 'Duration (hours)'
      = f.input :radius, as: :range, input_html: { step: 1 ,min: 0, max: 10}, label: 'Only show me restaurants within a specific distance', hint: 'Drag to adjust radius from 1-10 miles.'
      .form-group.row.radius-output
        .col-sm-9.offset-sm-3.text-bold
          output#radius-output.mr-1 5
          span miles
      = f.input :address, label: 'Location', placeholder: 'Search by city, zip code or place.'
      .form-group.row
        .col-sm-9.offset-sm-3
          #map
          #infowindow-content
            / img#place-icon height="16" width="16"
            i.far.fa-map.text-page-primary.mr-1
            span#place-name.title= app_logo
            br/
            span#place-address
      = f.hidden_field :latitude
      = f.hidden_field :longitude
      = f.hidden_field :group_id
      .form-group.row
        .col-sm-9.offset-sm-3
          = f.button :submit, class: "btn-page-primary"
          a.btn.btn-outline-secondary.ml-4 href="#{group_path @group}" Cancel
